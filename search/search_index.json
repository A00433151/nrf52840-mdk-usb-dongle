{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"nRF52840 Micro Dev Kit USB Dongle A small and low-cost nRF52840 Micro Development Kit in USB Dongle Form Factor Description The nRF52840 Micro Dev Kit USB Dongle is a small and low-cost development platform enabled by the nRF52840 multiprotocol SoC in a convenient USB dongle form factor. The nRF52840 Micro Dev Kit USB Dongle features a programmable user button, RGB LED, up to 12 GPIOs and 2.4G Chip antenna on board. The USB Dongle can be used as a low-cost Bluetooth5/Tread/802.15.4/ANT/2.4GHz multiprotocol node or development board. Alternatively the USB Dongle can be used as a Network Co-Processor(NCP) with a simple connection to a PC or other USB enabled device. Hardware Features Nordic nRF52840 System-on-Chip ARM\u00ae Cortex\u00ae-M4F processor optimized for ultra-low power operation Combining Bluetooth 5 , Bluetooth Mesh , Thread , IEEE 802.15.4 , ANT and 2.4GHz proprietary On-chip NFC-A tag On-chip USB 2.0 (Full speed) controller ARM TrustZone\u00ae Cryptocell 310 security subsystem 1 MB FLASH and 256 kB RAM Up to 12 GPIOs available via headers User programmable Button and RGB LED On-board 2.4G chip antenna 3.3V regulator with 1A peak current output VBUS VIN Power-Path Management Convenient USB dongle form factor Breadboard-friendly with dual 10-Pin headers Measures 1.65\" x 0.7\" x 0.16\" (42mm x 18mm x 4mm) without headers soldered in Pinout Diagram Software Resource The nRF52840 Micro Dev Kit USB Dongle can be used to play with : nRF5 SDK , OpenThread , Web Bluetooth , iBeacon , Eddystone , and more. Software Brief Description nRF5 SDK Offical Software Development Kit for nRF51 and nRF52 Series OpenThread Border Router An open source border router, designed to work with OpenThread Thread Network Sniffer Help you to efficiently analyze Thread network traffic Web Bluetooth Bluetooth support for the Web iBeacon A Bluetooth low energy advertising message format designed by Apple Eddystone A protocol specification that defines a Bluetooth low energy message format for proximity beacon messages CircuitPython A Python language for microcontrollers designed to simplify experimentation and learning TinyGo Go compiler for small devices, based on LLVM Rust for nrf52840-mdk Rust support for the nrf52840-mdk development board Hardware Resource Releases Design Files V1.0 nRF52840 Micro Dev Kit USB Dongle V1.0 Pinout Diagram nRF52840 Micro Dev Kit USB Dongle V1.0 Schematic nRF52840 Micro Dev Kit USB Dongle V1.0 Board File nRF52840 Micro Dev Kit USB Dongle V1.0 3D STEP Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Introduction"},{"location":"#nrf52840-micro-dev-kit-usb-dongle-a-small-and-low-cost-nrf52840-micro-development-kit-in-usb-dongle-form-factor","text":"","title":"nRF52840 Micro Dev Kit USB Dongle A small and low-cost nRF52840 Micro Development Kit in USB Dongle Form Factor"},{"location":"#description","text":"The nRF52840 Micro Dev Kit USB Dongle is a small and low-cost development platform enabled by the nRF52840 multiprotocol SoC in a convenient USB dongle form factor. The nRF52840 Micro Dev Kit USB Dongle features a programmable user button, RGB LED, up to 12 GPIOs and 2.4G Chip antenna on board. The USB Dongle can be used as a low-cost Bluetooth5/Tread/802.15.4/ANT/2.4GHz multiprotocol node or development board. Alternatively the USB Dongle can be used as a Network Co-Processor(NCP) with a simple connection to a PC or other USB enabled device.","title":"Description"},{"location":"#hardware-features","text":"Nordic nRF52840 System-on-Chip ARM\u00ae Cortex\u00ae-M4F processor optimized for ultra-low power operation Combining Bluetooth 5 , Bluetooth Mesh , Thread , IEEE 802.15.4 , ANT and 2.4GHz proprietary On-chip NFC-A tag On-chip USB 2.0 (Full speed) controller ARM TrustZone\u00ae Cryptocell 310 security subsystem 1 MB FLASH and 256 kB RAM Up to 12 GPIOs available via headers User programmable Button and RGB LED On-board 2.4G chip antenna 3.3V regulator with 1A peak current output VBUS VIN Power-Path Management Convenient USB dongle form factor Breadboard-friendly with dual 10-Pin headers Measures 1.65\" x 0.7\" x 0.16\" (42mm x 18mm x 4mm) without headers soldered in","title":"Hardware Features"},{"location":"#pinout-diagram","text":"","title":"Pinout Diagram"},{"location":"#software-resource","text":"The nRF52840 Micro Dev Kit USB Dongle can be used to play with : nRF5 SDK , OpenThread , Web Bluetooth , iBeacon , Eddystone , and more. Software Brief Description nRF5 SDK Offical Software Development Kit for nRF51 and nRF52 Series OpenThread Border Router An open source border router, designed to work with OpenThread Thread Network Sniffer Help you to efficiently analyze Thread network traffic Web Bluetooth Bluetooth support for the Web iBeacon A Bluetooth low energy advertising message format designed by Apple Eddystone A protocol specification that defines a Bluetooth low energy message format for proximity beacon messages CircuitPython A Python language for microcontrollers designed to simplify experimentation and learning TinyGo Go compiler for small devices, based on LLVM Rust for nrf52840-mdk Rust support for the nrf52840-mdk development board","title":"Software Resource"},{"location":"#hardware-resource","text":"Releases Design Files V1.0 nRF52840 Micro Dev Kit USB Dongle V1.0 Pinout Diagram nRF52840 Micro Dev Kit USB Dongle V1.0 Schematic nRF52840 Micro Dev Kit USB Dongle V1.0 Board File nRF52840 Micro Dev Kit USB Dongle V1.0 3D STEP","title":"Hardware Resource"},{"location":"#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"CONTRIBUTING/","text":"Interested in contributing to the nRF52840 Micro Dev Kit USB Dongle project? Want to report a bug? Before you do, please read the following guidelines. Got a question or problem? For quick questions there's no need to open an issue as you can comment at the bottom of the corresponding page. Found a bug? If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. Missing a feature? You can request a new feature by submitting an issue to our GitHub Repository. Be sure that it is of use for everyone. Create an Issue","title":"Contributing"},{"location":"CONTRIBUTING/#got-a-question-or-problem","text":"For quick questions there's no need to open an issue as you can comment at the bottom of the corresponding page.","title":"Got a question or problem?"},{"location":"CONTRIBUTING/#found-a-bug","text":"If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix.","title":"Found a bug?"},{"location":"CONTRIBUTING/#missing-a-feature","text":"You can request a new feature by submitting an issue to our GitHub Repository. Be sure that it is of use for everyone. Create an Issue","title":"Missing a feature?"},{"location":"LICENSE/","text":"MIT License Copyright 2019 makerdiary.com Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"how-to-buy/","text":"How to Buy nRF52840 Micro Dev Kit USB Dongle Buy Online nRF52840 Micro Dev Kit USB Dongle is available on the following channels (click to go directly to the product): Bulk Customization We are ready to customize our electronics and firmware to better meet your solution's needs. Many of our platforms are prepared for customization. If you would like to do some serious business, drop a line and we'll reply before you know it. Email Us","title":"How to Buy"},{"location":"how-to-buy/#how-to-buy-nrf52840-micro-dev-kit-usb-dongle","text":"","title":"How to Buy nRF52840 Micro Dev Kit USB Dongle"},{"location":"how-to-buy/#buy-online","text":"nRF52840 Micro Dev Kit USB Dongle is available on the following channels (click to go directly to the product):","title":"Buy Online"},{"location":"how-to-buy/#bulk-customization","text":"We are ready to customize our electronics and firmware to better meet your solution's needs. Many of our platforms are prepared for customization. If you would like to do some serious business, drop a line and we'll reply before you know it. Email Us","title":"Bulk &amp; Customization"},{"location":"OTBR/","text":"OpenThread Border Router An open source border router, designed to work with OpenThread Introduction A Thread Border Router serves as a gateway between the Internet and the Thread network. OpenThread's implementation of a Border Router is called OpenThread Border Router (OTBR). OTBR includes a number of features, including: Web GUI for configuration and management Thread Border Agent to support external commissioning DHCPv6 Prefix Delegation to obtain IPv6 prefixes for a Thread network NAT64 for connecting to IPv4 networks DNS64 to allow Thread devices to initiate communications by name to an IPv4-only server Thread interface driver using wpantund For more technical details, openthread.io is the best place for you. In the following documentation sections, you'll build an OpenThread Border Router with nRF52840 Micro Dev Kit USB Dongle and Raspberry Pi 3B. Required hardware Raspberry Pi 3B nRF52840 Micro Dev Kit USB Dongle with the latest NCP firmware 4 GB (or larger) microSD card and microSD card reader microUSB power supply for Raspberry Pi 3B Getting started Complete the following steps to set up the Border Router on Raspberry Pi 3B. Download and install Raspbian Download the RASPBIAN STRETCH LITE image to your host and follow the installation guide to install the image on an microSD card. Set up the Border Router Warning Before you continue, make sure your Raspberry Pi 3B is connected to the internet using Ethernet. The bootstrap script disables the platform's Wi-Fi interface and the setup script requires internet connectivity to download and install wpantund . OTBR communicates with the Dongle(serves as NCP) via wpantund . On Raspberry Pi 3B: Clone the OTBR repository: git clone https://github.com/openthread/borderrouter Install dependencies: cd borderrouter ./script/bootstrap Compile and install OTBR and wpantund : ./script/setup Attach the Dongle to the Border Router platform via USB. Configure the Dongle's serial port in wpantund . Add the serial port name to /etc/wpantund.conf . For example, for a serial port name of ttyACM0 : Config:NCP:SocketPath /dev/ttyACM0 Restart the Border Router. The OTBR service should start on boot. Verify services On Raspberry Pi 3B, verify that all required services are enabled: sudo systemctl status If the setup script above was successful, the RPI3B is in running state and the following services appear in the output: wpantund.service avahi-daemon.service otbr-web.service otbr-agent.service If the RPI3B is in degraded state, some other service has failed to start. Check to see which: sudo systemctl --failed If the failed service is tayga or dnsmasq , it is normal. These services are completely configured as part of the Wi-Fi Access Point Setup . Verify NCP Verify that the NCP is in the correct state: sudo wpanctl status wpanctl is a command line utility provided with wpantund . It is used to communicate with the wireless PAN interface (default is wpan0 ) that wpantund is bound to in the NCP design. If the NCP is successfully running OpenThread and is not a member of a Thread network, the output should be similar to the below: wpan0 = [ NCP:State = offline Daemon:Enabled = true NCP:Version = OPENTHREAD/20170716-00889-g4ce55934; NRF52840; Sep 13 2018 20:55:40 Daemon:Version = 0.08.00d (/4eb20ac; Sep 13 2018 08:00:41) Config:NCP:DriverName = spinel NCP:HardwareAddress = [ 74358AAD04866C78 ] ] Tip For more features(such as external commissioning), you can follow the Update NCP firmware section to running the latest NCP firmware. If the NCP:State is uninitialized , troubleshoot with the following: Verify the RPI3B has sufficient power (use the proper external AC adapter). Disconnect and reconnect the Dongle to the RPI3B. Verify that the NCP serial device is present. For example, if the device should be attached to /dev/ttyACM0 : ls /dev/ttyACM* /dev/ttyACM0 Reset the NCP with sudo wpanctl reset . Check the NCP status again with sudo wpanctl status . Web GUI Now, you can use the OpenThread Border Router (OTBR) Web GUI to configure and form, join, or check the status of a Thread network. The Border Router enables Access Point mode and advertises the BorderRouter-AP network default. Connect to the BorderRouter-AP Wi-Fi network and access the Web GUI by visiting the OTBR's local IPv4 address( 10.42.0.1 default) in a mobile browser: Join a Thread network Use the Join menu option to scan for and join an existing Thread network. Form a Thread network Use the Form menu option to create a new Thread network. After the network forms, confirm by checking the Status menu option or running sudo wpanctl status on the command line of the OTBR: External Thread Commissioning OpenThread Border Router (OTBR) features a Thread Border Agent, which supports external Thread Commissioning. In external Thread Commissioning, a device outside of the Thread network (for example, a mobile phone) commissions new devices onto the network. This section details how to use the Thread Commissioning App to commission an OpenThread device onto a network created and managed by the OTBR Web GUI. Set up the Joiner device You should prepare another Dongle or an nRF52840 board(such as nRF52840-MDK ). Flash the board with the OpenThread CLI firmware. Here is the pre-built CLI firmware for the Dongle: CLI firmware Note For programming, just follow the \" Programming \" section. Once the Joiner device is ready, obtain its factory-assigned IEEE EUI-64. Use the eui64 command in the OpenThread CLI: eui64 4499f69d088dac4b Done Download the Thread Commissioning App External commissioning is supported by the Thread Commissioning App, available for download on the Google Play Store for Android devices. Thread Commissioning App Connect to the Border Router Start the Thread Commissioning App, then tap FIND WI-FI NETWORK and connect your phone running the Thread Commissioning App to the Wi-Fi access point. Select the target Border Router from the available list. The name is the same as the Thread network created by the OTBR Web GUI. If the same Border Router shows up multiple times with different IPv4 and IPv6 addresses, select the one with the static IPv4 address used for the Wi-Fi access point setup ( 10.42.0.1 here). When prompted for a password, enter the passphrase (Commissioner Credential) set by the OTBR Web GUI. Commission the Joiner Once connected to the Border Router, the app provides the option to scan a Connect QR Code or enter a Join Passphrase manually. Thread Connect QR Codes are created with the following text string format: v = 1 eui = 4499f69d088dac4b cc = J01NU5 Where eui is the Joiner device's EUI64 value and cc is the Joiner Credential. Use this text string with an online QR Code generator(such as unitag.io ) to create a QR Code for scanning. In the Thread Commissioning App, scan the Connect QR Code of the Joiner device: While the app is waiting, enter the OpenThread CLI on the Joiner device and start the Joiner role with that same Joiner Credential: ifconfig up Done joiner start J01NU5 Done Wait a minute for the DTLS handshake to complete between the Commissioner and Joiner: Join success Join the network On the Joiner device, start the Thread protocol to automatically join the network. thread start Done Check the state after a few moments to confirm. It may initially start as a Child, but within two minutes, it will upgrade to a Router. state router Done Obtain the addresses of the joiner by typing ipaddr : ipaddr fd11:1111:1122:0:0:ff:fe00:4400 fd11:22:0:0:8250:8753:2ff9:ac2f fe80:0:0:0:c43d:cdd:9e66:6d4e fd11:1111:1122:0:87a9:87be:ed3a:299e Done Check the Internet connectivity Test the connectivity between the Joiner device in the Thread network and the Internet by pinging a public IPv4 address. To reach the IPv4 address from the Thread device, a Well-Known Prefix of 64:ff9b::/96 and an IPv4 address of the destination are used. To ping Google\u2019s DNS 8.8.8.8 from the IPv6 address, append a hexadecimal form of the IPv6 to the Well-Known Prefix resulting in: 64:ff9b::808:808 . ping 64 :ff9b::808:808 16 bytes from 64 :ff9b:0:0:0:0:808:808: icmp_seq = 0 hlim = 39 time = 37ms ping 64 :ff9b::808:808 16 bytes from 64 :ff9b:0:0:0:0:808:808: icmp_seq = 1 hlim = 39 time = 35ms ping 64 :ff9b::808:808 16 bytes from 64 :ff9b:0:0:0:0:808:808: icmp_seq = 2 hlim = 39 time = 35ms Congratulations! You've successfully created an OpenThread Border Router, while allowing the Joiner device in the Thread network communicating with the Internet. Reference openthread.io/guides/border-router Nordic Thread Border Router Build a Thread network with nRF52840-MDK License Content on this page is licensed under the Creative Commons Attribution 3.0 License . Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"OpenThread Border Router"},{"location":"OTBR/#openthread-border-router-an-open-source-border-router-designed-to-work-with-openthread","text":"","title":"OpenThread Border Router An open source border router, designed to work with OpenThread"},{"location":"OTBR/#introduction","text":"A Thread Border Router serves as a gateway between the Internet and the Thread network. OpenThread's implementation of a Border Router is called OpenThread Border Router (OTBR). OTBR includes a number of features, including: Web GUI for configuration and management Thread Border Agent to support external commissioning DHCPv6 Prefix Delegation to obtain IPv6 prefixes for a Thread network NAT64 for connecting to IPv4 networks DNS64 to allow Thread devices to initiate communications by name to an IPv4-only server Thread interface driver using wpantund For more technical details, openthread.io is the best place for you. In the following documentation sections, you'll build an OpenThread Border Router with nRF52840 Micro Dev Kit USB Dongle and Raspberry Pi 3B.","title":"Introduction"},{"location":"OTBR/#required-hardware","text":"Raspberry Pi 3B nRF52840 Micro Dev Kit USB Dongle with the latest NCP firmware 4 GB (or larger) microSD card and microSD card reader microUSB power supply for Raspberry Pi 3B","title":"Required hardware"},{"location":"OTBR/#getting-started","text":"Complete the following steps to set up the Border Router on Raspberry Pi 3B.","title":"Getting started"},{"location":"OTBR/#download-and-install-raspbian","text":"Download the RASPBIAN STRETCH LITE image to your host and follow the installation guide to install the image on an microSD card.","title":"Download and install Raspbian"},{"location":"OTBR/#set-up-the-border-router","text":"Warning Before you continue, make sure your Raspberry Pi 3B is connected to the internet using Ethernet. The bootstrap script disables the platform's Wi-Fi interface and the setup script requires internet connectivity to download and install wpantund . OTBR communicates with the Dongle(serves as NCP) via wpantund . On Raspberry Pi 3B: Clone the OTBR repository: git clone https://github.com/openthread/borderrouter Install dependencies: cd borderrouter ./script/bootstrap Compile and install OTBR and wpantund : ./script/setup Attach the Dongle to the Border Router platform via USB. Configure the Dongle's serial port in wpantund . Add the serial port name to /etc/wpantund.conf . For example, for a serial port name of ttyACM0 : Config:NCP:SocketPath /dev/ttyACM0 Restart the Border Router. The OTBR service should start on boot.","title":"Set up the Border Router"},{"location":"OTBR/#verify-services","text":"On Raspberry Pi 3B, verify that all required services are enabled: sudo systemctl status If the setup script above was successful, the RPI3B is in running state and the following services appear in the output: wpantund.service avahi-daemon.service otbr-web.service otbr-agent.service If the RPI3B is in degraded state, some other service has failed to start. Check to see which: sudo systemctl --failed If the failed service is tayga or dnsmasq , it is normal. These services are completely configured as part of the Wi-Fi Access Point Setup .","title":"Verify services"},{"location":"OTBR/#verify-ncp","text":"Verify that the NCP is in the correct state: sudo wpanctl status wpanctl is a command line utility provided with wpantund . It is used to communicate with the wireless PAN interface (default is wpan0 ) that wpantund is bound to in the NCP design. If the NCP is successfully running OpenThread and is not a member of a Thread network, the output should be similar to the below: wpan0 = [ NCP:State = offline Daemon:Enabled = true NCP:Version = OPENTHREAD/20170716-00889-g4ce55934; NRF52840; Sep 13 2018 20:55:40 Daemon:Version = 0.08.00d (/4eb20ac; Sep 13 2018 08:00:41) Config:NCP:DriverName = spinel NCP:HardwareAddress = [ 74358AAD04866C78 ] ] Tip For more features(such as external commissioning), you can follow the Update NCP firmware section to running the latest NCP firmware. If the NCP:State is uninitialized , troubleshoot with the following: Verify the RPI3B has sufficient power (use the proper external AC adapter). Disconnect and reconnect the Dongle to the RPI3B. Verify that the NCP serial device is present. For example, if the device should be attached to /dev/ttyACM0 : ls /dev/ttyACM* /dev/ttyACM0 Reset the NCP with sudo wpanctl reset . Check the NCP status again with sudo wpanctl status .","title":"Verify NCP"},{"location":"OTBR/#web-gui","text":"Now, you can use the OpenThread Border Router (OTBR) Web GUI to configure and form, join, or check the status of a Thread network. The Border Router enables Access Point mode and advertises the BorderRouter-AP network default. Connect to the BorderRouter-AP Wi-Fi network and access the Web GUI by visiting the OTBR's local IPv4 address( 10.42.0.1 default) in a mobile browser:","title":"Web GUI"},{"location":"OTBR/#join-a-thread-network","text":"Use the Join menu option to scan for and join an existing Thread network.","title":"Join a Thread network"},{"location":"OTBR/#form-a-thread-network","text":"Use the Form menu option to create a new Thread network. After the network forms, confirm by checking the Status menu option or running sudo wpanctl status on the command line of the OTBR:","title":"Form a Thread network"},{"location":"OTBR/#external-thread-commissioning","text":"OpenThread Border Router (OTBR) features a Thread Border Agent, which supports external Thread Commissioning. In external Thread Commissioning, a device outside of the Thread network (for example, a mobile phone) commissions new devices onto the network. This section details how to use the Thread Commissioning App to commission an OpenThread device onto a network created and managed by the OTBR Web GUI.","title":"External Thread Commissioning"},{"location":"OTBR/#set-up-the-joiner-device","text":"You should prepare another Dongle or an nRF52840 board(such as nRF52840-MDK ). Flash the board with the OpenThread CLI firmware. Here is the pre-built CLI firmware for the Dongle: CLI firmware Note For programming, just follow the \" Programming \" section. Once the Joiner device is ready, obtain its factory-assigned IEEE EUI-64. Use the eui64 command in the OpenThread CLI: eui64 4499f69d088dac4b Done","title":"Set up the Joiner device"},{"location":"OTBR/#download-the-thread-commissioning-app","text":"External commissioning is supported by the Thread Commissioning App, available for download on the Google Play Store for Android devices. Thread Commissioning App","title":"Download the Thread Commissioning App"},{"location":"OTBR/#connect-to-the-border-router","text":"Start the Thread Commissioning App, then tap FIND WI-FI NETWORK and connect your phone running the Thread Commissioning App to the Wi-Fi access point. Select the target Border Router from the available list. The name is the same as the Thread network created by the OTBR Web GUI. If the same Border Router shows up multiple times with different IPv4 and IPv6 addresses, select the one with the static IPv4 address used for the Wi-Fi access point setup ( 10.42.0.1 here). When prompted for a password, enter the passphrase (Commissioner Credential) set by the OTBR Web GUI.","title":"Connect to the Border Router"},{"location":"OTBR/#commission-the-joiner","text":"Once connected to the Border Router, the app provides the option to scan a Connect QR Code or enter a Join Passphrase manually. Thread Connect QR Codes are created with the following text string format: v = 1 eui = 4499f69d088dac4b cc = J01NU5 Where eui is the Joiner device's EUI64 value and cc is the Joiner Credential. Use this text string with an online QR Code generator(such as unitag.io ) to create a QR Code for scanning. In the Thread Commissioning App, scan the Connect QR Code of the Joiner device: While the app is waiting, enter the OpenThread CLI on the Joiner device and start the Joiner role with that same Joiner Credential: ifconfig up Done joiner start J01NU5 Done Wait a minute for the DTLS handshake to complete between the Commissioner and Joiner: Join success","title":"Commission the Joiner"},{"location":"OTBR/#join-the-network","text":"On the Joiner device, start the Thread protocol to automatically join the network. thread start Done Check the state after a few moments to confirm. It may initially start as a Child, but within two minutes, it will upgrade to a Router. state router Done Obtain the addresses of the joiner by typing ipaddr : ipaddr fd11:1111:1122:0:0:ff:fe00:4400 fd11:22:0:0:8250:8753:2ff9:ac2f fe80:0:0:0:c43d:cdd:9e66:6d4e fd11:1111:1122:0:87a9:87be:ed3a:299e Done","title":"Join the network"},{"location":"OTBR/#check-the-internet-connectivity","text":"Test the connectivity between the Joiner device in the Thread network and the Internet by pinging a public IPv4 address. To reach the IPv4 address from the Thread device, a Well-Known Prefix of 64:ff9b::/96 and an IPv4 address of the destination are used. To ping Google\u2019s DNS 8.8.8.8 from the IPv6 address, append a hexadecimal form of the IPv6 to the Well-Known Prefix resulting in: 64:ff9b::808:808 . ping 64 :ff9b::808:808 16 bytes from 64 :ff9b:0:0:0:0:808:808: icmp_seq = 0 hlim = 39 time = 37ms ping 64 :ff9b::808:808 16 bytes from 64 :ff9b:0:0:0:0:808:808: icmp_seq = 1 hlim = 39 time = 35ms ping 64 :ff9b::808:808 16 bytes from 64 :ff9b:0:0:0:0:808:808: icmp_seq = 2 hlim = 39 time = 35ms","title":"Check the Internet connectivity"},{"location":"OTBR/#congratulations","text":"You've successfully created an OpenThread Border Router, while allowing the Joiner device in the Thread network communicating with the Internet.","title":"Congratulations!"},{"location":"OTBR/#reference","text":"openthread.io/guides/border-router Nordic Thread Border Router Build a Thread network with nRF52840-MDK","title":"Reference"},{"location":"OTBR/#license","text":"Content on this page is licensed under the Creative Commons Attribution 3.0 License .","title":"License"},{"location":"OTBR/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"getting-started/","text":"Getting started with nRF52840 Micro Dev Kit USB Dongle Congratulations on getting the nRF52840 Micro Dev Kit USB Dongle! This guide details how to get started with the nRF52840 Micro Dev Kit USB Dongle development, and what to expect when you do so. When you get a new dongle, it has been preprogrammed with the OpenThread NCP image. So you can easily set up a Thread NCP Joiner, which can be securely authenticated and commissioned onto a Thread network. What you'll need nRF52840 Micro Dev Kit USB Dongle PC running a Linux based operating system or MacOS wpantund Installing wpantund wpantund is a user-space network interface driver/daemon that provides a native IPv6 network interface to a low-power wireless Network Co-Processor (NCP). It was written and developed by Nest Labs to make supporting Thread connectivity on Unix-like operating systems more straightforward. wpantund is designed to marshall all access to the NCP, ensuring that it always remains in a consistent and well-defined state. Follow the wpantund Installation Guide to install wpantund on Ubuntu or macOS. Connecting the USB Dongle Connect the nRF52840 Micro Dev Kit USB Dongle to your host as shown below: The USB Dongle will be recognized as an nRF52840 OpenThread Device like this: Configure wpantund In the NCP design, use wpantund to communicate with and manage the Thread device. In a terminal window, start wpantund on the serial port with the NCP, creating the interface utun7 and enabling info logs: $ sudo /usr/local/sbin/wpantund -o Config:NCP:SocketPath /dev/cu.usbmodem14112 \\ -o Config:TUN:InterfaceName utun7 \\ -o Daemon:SyslogMask -info Tip To configure wpantund without using command line parameters, modify the /etc/wpantund.conf file. If the NCP is successfully running OpenThread, the output should be similar to the below: Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Starting wpantund 0 .08.00d ( Jun 9 2018 00 :31:51 ) . . . Sep 11 20 :51:21 wpantund [ 39634 ] Notice : SOURCE_VERSION = 0 .07.01-217-g86d29d6 Sep 11 20 :51:21 wpantund [ 39634 ] Notice : BUILD_VERSION = 0 .07.01-217-g86d29d6 Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Configuration file /etc/wpantund.conf read. Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Ready. Using DBUS bus :1.0 Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Running as root without dropping privileges! Sep 11 20 :51:21 wpantund [ 39634 ] Notice : [ -NCP- ] : NCP was reset ( STATUS_RESET_POWER_ON, 112 ) Sep 11 20 :51:21 wpantund [ 39634 ] Error : Unexpected reset during NCP initialization. Sep 11 20 :51:21 wpantund [ 39634 ] Error : Resetting and trying again... ( retry 1 ) Sep 11 20 :51:21 wpantund [ 39634 ] Notice : [ -NCP- ] : NCP was reset ( STATUS_RESET_POWER_ON, 112 ) Sep 11 20 :51:21 wpantund [ 39634 ] Notice : State change: uninitialized - offline Sep 11 20 :51:21 wpantund [ 39634 ] Notice : NCP is running OPENTHREAD/20170716-00745-g79e35c57; NRF52840; Jul 15 2018 09:52:08 Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Driver is running 0.08.00d (0.07.01-217-g86d29d6; Jun 9 2018 00:31:51) Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Network is not joinable Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Resetting interface ( s ) . . . Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Finished initializing NCP Leave this terminal window open so that logs from wpantund can be viewed. A user-defined interface is required to communicate with the NCP using wpanctl . Open a new terminal window and using wpanctl , connect to the interface you just set up: $ sudo /usr/local/bin/wpanctl -I utun7 wpanctl:utun7 Verify NCP Verify that the NCP is in the correct state: wpanctl:utun7 status utun7 = [ NCP:State = offline Daemon:Enabled = true NCP:Version = OPENTHREAD/20170716-00745-g79e35c57; NRF52840; Jul 15 2018 09:52:08 Daemon:Version = 0.08.00d (0.07.01-217-g86d29d6; Jun 9 2018 00:31:51) Config:NCP:DriverName = spinel NCP:HardwareAddress = [ 38D6B665CE553B4F ] ] Now, you can scan for networks on the NCP Joiner. If you have formed a Thread network, the output should be similar to the below: Tip You can follow this guide to Build a Thread network with nRF52840-MDK for testing. Update NCP firmware More features will be added to the NCP firmware gradually over time. The latest pre-built NCP firmware is a .hex file. You can download here: NCP firmware While holding the dongle's RESET/USR button, connect it to your computer. When the Dongle has entered the bootloader mode, the RGB LED pulses RED. It is now ready for programming. Note For programming, just follow the \" Programming \" section. How to build NCP firmware? You can also build the latest NCP firmware by yourself. The following steps detail how to do that. Clone and install OpenThread: $ git clone --recursive https://github.com/openthread/openthread.git $ cd openthread $ ./bootstrap Build the firmware with the following commands: $ make -f examples/Makefile-nrf52840 clean $ make -f examples/Makefile-nrf52840 USB = 1 BOOTLOADER = 1 BORDER_AGENT = 1 BORDER_ROUTER = 1 COMMISSIONER = 1 JOINER = 1 UDP_PROXY = 1 CFLAGS += -UCONFIG_GPIO_AS_PINRESET Warning You MUST undefine the CONFIG_GPIO_AS_PINRESET flag, or the Dongle would not enter the bootloader mode next time by holding the dongle's RESET/USR button. Please remember to add CFLAGS+=-UCONFIG_GPIO_AS_PINRESET to undefine the CONFIG_GPIO_AS_PINRESET flag! Navigate to the directory with the OpenThread FTD NCP binary, and convert it to hex format: $ cd ~/openthread/output/nrf52840/bin $ arm-none-eabi-objcopy -O ihex ot-ncp-ftd ot-ncp-ftd.hex The ot-ncp-ftd.hex file is the expected NCP firmware. More applications See the following topics for further introduction: Build an OpenThread Border Router with Raspberry Pi 3B Build a Thread Network Sniffer with Wireshark Clone the repository Clone the makerdiary/nrf52840-mdk-usb-dongle repository or download it as a zip package and put its contents to your working directory. $ git clone https://github.com/makerdiary/nrf52840-mdk-usb-dongle.git This repository provides documents and example applications that you can run on your board to ensure that everything is set up correctly. You can also star or watch this repository to let GitHub send you notifications when something new is added. Star Reference Build a Thread network with nRF52840-MDK Thread Primer \u2014 covers all the Thread concepts in this documentation Build a Thread network with nRF52840 boards and OpenThread License Content on this page is licensed under the Creative Commons Attribution 3.0 License . Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Getting Started"},{"location":"getting-started/#getting-started-with-nrf52840-micro-dev-kit-usb-dongle","text":"Congratulations on getting the nRF52840 Micro Dev Kit USB Dongle! This guide details how to get started with the nRF52840 Micro Dev Kit USB Dongle development, and what to expect when you do so. When you get a new dongle, it has been preprogrammed with the OpenThread NCP image. So you can easily set up a Thread NCP Joiner, which can be securely authenticated and commissioned onto a Thread network.","title":"Getting started with nRF52840 Micro Dev Kit USB Dongle"},{"location":"getting-started/#what-youll-need","text":"nRF52840 Micro Dev Kit USB Dongle PC running a Linux based operating system or MacOS wpantund","title":"What you'll need"},{"location":"getting-started/#installing-wpantund","text":"wpantund is a user-space network interface driver/daemon that provides a native IPv6 network interface to a low-power wireless Network Co-Processor (NCP). It was written and developed by Nest Labs to make supporting Thread connectivity on Unix-like operating systems more straightforward. wpantund is designed to marshall all access to the NCP, ensuring that it always remains in a consistent and well-defined state. Follow the wpantund Installation Guide to install wpantund on Ubuntu or macOS.","title":"Installing wpantund"},{"location":"getting-started/#connecting-the-usb-dongle","text":"Connect the nRF52840 Micro Dev Kit USB Dongle to your host as shown below: The USB Dongle will be recognized as an nRF52840 OpenThread Device like this:","title":"Connecting the USB Dongle"},{"location":"getting-started/#configure-wpantund","text":"In the NCP design, use wpantund to communicate with and manage the Thread device. In a terminal window, start wpantund on the serial port with the NCP, creating the interface utun7 and enabling info logs: $ sudo /usr/local/sbin/wpantund -o Config:NCP:SocketPath /dev/cu.usbmodem14112 \\ -o Config:TUN:InterfaceName utun7 \\ -o Daemon:SyslogMask -info Tip To configure wpantund without using command line parameters, modify the /etc/wpantund.conf file. If the NCP is successfully running OpenThread, the output should be similar to the below: Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Starting wpantund 0 .08.00d ( Jun 9 2018 00 :31:51 ) . . . Sep 11 20 :51:21 wpantund [ 39634 ] Notice : SOURCE_VERSION = 0 .07.01-217-g86d29d6 Sep 11 20 :51:21 wpantund [ 39634 ] Notice : BUILD_VERSION = 0 .07.01-217-g86d29d6 Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Configuration file /etc/wpantund.conf read. Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Ready. Using DBUS bus :1.0 Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Running as root without dropping privileges! Sep 11 20 :51:21 wpantund [ 39634 ] Notice : [ -NCP- ] : NCP was reset ( STATUS_RESET_POWER_ON, 112 ) Sep 11 20 :51:21 wpantund [ 39634 ] Error : Unexpected reset during NCP initialization. Sep 11 20 :51:21 wpantund [ 39634 ] Error : Resetting and trying again... ( retry 1 ) Sep 11 20 :51:21 wpantund [ 39634 ] Notice : [ -NCP- ] : NCP was reset ( STATUS_RESET_POWER_ON, 112 ) Sep 11 20 :51:21 wpantund [ 39634 ] Notice : State change: uninitialized - offline Sep 11 20 :51:21 wpantund [ 39634 ] Notice : NCP is running OPENTHREAD/20170716-00745-g79e35c57; NRF52840; Jul 15 2018 09:52:08 Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Driver is running 0.08.00d (0.07.01-217-g86d29d6; Jun 9 2018 00:31:51) Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Network is not joinable Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Resetting interface ( s ) . . . Sep 11 20 :51:21 wpantund [ 39634 ] Notice : Finished initializing NCP Leave this terminal window open so that logs from wpantund can be viewed. A user-defined interface is required to communicate with the NCP using wpanctl . Open a new terminal window and using wpanctl , connect to the interface you just set up: $ sudo /usr/local/bin/wpanctl -I utun7 wpanctl:utun7","title":"Configure wpantund"},{"location":"getting-started/#verify-ncp","text":"Verify that the NCP is in the correct state: wpanctl:utun7 status utun7 = [ NCP:State = offline Daemon:Enabled = true NCP:Version = OPENTHREAD/20170716-00745-g79e35c57; NRF52840; Jul 15 2018 09:52:08 Daemon:Version = 0.08.00d (0.07.01-217-g86d29d6; Jun 9 2018 00:31:51) Config:NCP:DriverName = spinel NCP:HardwareAddress = [ 38D6B665CE553B4F ] ] Now, you can scan for networks on the NCP Joiner. If you have formed a Thread network, the output should be similar to the below: Tip You can follow this guide to Build a Thread network with nRF52840-MDK for testing.","title":"Verify NCP"},{"location":"getting-started/#update-ncp-firmware","text":"More features will be added to the NCP firmware gradually over time. The latest pre-built NCP firmware is a .hex file. You can download here: NCP firmware While holding the dongle's RESET/USR button, connect it to your computer. When the Dongle has entered the bootloader mode, the RGB LED pulses RED. It is now ready for programming. Note For programming, just follow the \" Programming \" section.","title":"Update NCP firmware"},{"location":"getting-started/#how-to-build-ncp-firmware","text":"You can also build the latest NCP firmware by yourself. The following steps detail how to do that. Clone and install OpenThread: $ git clone --recursive https://github.com/openthread/openthread.git $ cd openthread $ ./bootstrap Build the firmware with the following commands: $ make -f examples/Makefile-nrf52840 clean $ make -f examples/Makefile-nrf52840 USB = 1 BOOTLOADER = 1 BORDER_AGENT = 1 BORDER_ROUTER = 1 COMMISSIONER = 1 JOINER = 1 UDP_PROXY = 1 CFLAGS += -UCONFIG_GPIO_AS_PINRESET Warning You MUST undefine the CONFIG_GPIO_AS_PINRESET flag, or the Dongle would not enter the bootloader mode next time by holding the dongle's RESET/USR button. Please remember to add CFLAGS+=-UCONFIG_GPIO_AS_PINRESET to undefine the CONFIG_GPIO_AS_PINRESET flag! Navigate to the directory with the OpenThread FTD NCP binary, and convert it to hex format: $ cd ~/openthread/output/nrf52840/bin $ arm-none-eabi-objcopy -O ihex ot-ncp-ftd ot-ncp-ftd.hex The ot-ncp-ftd.hex file is the expected NCP firmware.","title":"How to build NCP firmware?"},{"location":"getting-started/#more-applications","text":"See the following topics for further introduction: Build an OpenThread Border Router with Raspberry Pi 3B Build a Thread Network Sniffer with Wireshark","title":"More applications"},{"location":"getting-started/#clone-the-repository","text":"Clone the makerdiary/nrf52840-mdk-usb-dongle repository or download it as a zip package and put its contents to your working directory. $ git clone https://github.com/makerdiary/nrf52840-mdk-usb-dongle.git This repository provides documents and example applications that you can run on your board to ensure that everything is set up correctly. You can also star or watch this repository to let GitHub send you notifications when something new is added. Star","title":"Clone the repository"},{"location":"getting-started/#reference","text":"Build a Thread network with nRF52840-MDK Thread Primer \u2014 covers all the Thread concepts in this documentation Build a Thread network with nRF52840 boards and OpenThread","title":"Reference"},{"location":"getting-started/#license","text":"Content on this page is licensed under the Creative Commons Attribution 3.0 License .","title":"License"},{"location":"getting-started/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"nrf5-sdk/","text":"nRF5 SDK Offical Software Development Kit for nRF51 and nRF52 Series Introduction The nRF5 SDK provides a rich developing environment for nRF5 Series devices by including a broad selection of drivers, libraries, examples for peripherals, SoftDevices, and proprietary radio protocols. The SDK is delivered as a plain .zip-archive, which makes it easy to install as well as giving you the freedom to choose the IDE and compiler of your choice. We provide example applications that you can run on your nRF52840-MDK to ensure that everything is set up correctly. After these tests, you can use the examples as starting point to develop your own applications. Before we begin, we need to install some software components to build our example applications. Set Up the Development Environment Use the following procedure to create a new development environment: Setting up the nRF5 SDK Development Environment Compiling and running blinky example Next, you can try to build one of the examples. Will use the blinky example here to keep it simple. Open terminal, change directory and the compile the example: $ cd ./nrf52840-mdk-usb-dongle/examples/nrf5-sdk/blinky/armgcc/ $ make While holding the dongle's RESET/USR button, connect it to your computer. When the Dongle has entered the bootloader mode, the RGB LED pulses RED. The Dongle is now ready for programming. Note For programming, just follow the \" Programming \" section. After programmed correctly, observe that the LEDs are blinking: Running examples that use a SoftDevice Before you can run more advanced examples that use Bluetooth or ANT , you must program the SoftDevice on the board. The SoftDevice binary is located in folder components/softdevice/ SoftDevice /hex in the SDK, where SoftDevice is the name of the SoftDevice. You can also download SoftDevices from nordicsemi.com . Open a command prompt in the folder that contains the makefile of an example. The example must require a SoftDevice. For example, the ble_app_blinky example. # change to the armgcc directory of ble_app_blinky example $ cd ~/nrf52840-mdk-usb-dongle/examples/nrf5-sdk/ble_app_blinky/armgcc Compile the application: $ make clean make Follow the Programming guide to program the Application and SoftDevice separately . Open nRF Connect App and start scanning, a device called nRF52840-MDK-Dongle will be found! You can try to connect it and turn on/off the LED. More examples Over time, more example applications will be added to the repository. You can star or watch the nrf52840-mdk-usb-dongle repository to stay up to date. Reference Nordic nRF5 SDK Nordic Semiconductor Infocenter makerdiary/nrf52840-mdk-usb-dongle License Content on this page is licensed under the Creative Commons Attribution 3.0 License . Create an Issue Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"nRF5 SDK"},{"location":"nrf5-sdk/#nrf5-sdk-offical-software-development-kit-for-nrf51-and-nrf52-series","text":"","title":"nRF5 SDK Offical Software Development Kit for nRF51 and nRF52 Series"},{"location":"nrf5-sdk/#introduction","text":"The nRF5 SDK provides a rich developing environment for nRF5 Series devices by including a broad selection of drivers, libraries, examples for peripherals, SoftDevices, and proprietary radio protocols. The SDK is delivered as a plain .zip-archive, which makes it easy to install as well as giving you the freedom to choose the IDE and compiler of your choice. We provide example applications that you can run on your nRF52840-MDK to ensure that everything is set up correctly. After these tests, you can use the examples as starting point to develop your own applications. Before we begin, we need to install some software components to build our example applications.","title":"Introduction"},{"location":"nrf5-sdk/#set-up-the-development-environment","text":"Use the following procedure to create a new development environment: Setting up the nRF5 SDK Development Environment","title":"Set Up the Development Environment"},{"location":"nrf5-sdk/#compiling-and-running-blinky-example","text":"Next, you can try to build one of the examples. Will use the blinky example here to keep it simple. Open terminal, change directory and the compile the example: $ cd ./nrf52840-mdk-usb-dongle/examples/nrf5-sdk/blinky/armgcc/ $ make While holding the dongle's RESET/USR button, connect it to your computer. When the Dongle has entered the bootloader mode, the RGB LED pulses RED. The Dongle is now ready for programming. Note For programming, just follow the \" Programming \" section. After programmed correctly, observe that the LEDs are blinking:","title":"Compiling and running blinky example"},{"location":"nrf5-sdk/#running-examples-that-use-a-softdevice","text":"Before you can run more advanced examples that use Bluetooth or ANT , you must program the SoftDevice on the board. The SoftDevice binary is located in folder components/softdevice/ SoftDevice /hex in the SDK, where SoftDevice is the name of the SoftDevice. You can also download SoftDevices from nordicsemi.com . Open a command prompt in the folder that contains the makefile of an example. The example must require a SoftDevice. For example, the ble_app_blinky example. # change to the armgcc directory of ble_app_blinky example $ cd ~/nrf52840-mdk-usb-dongle/examples/nrf5-sdk/ble_app_blinky/armgcc Compile the application: $ make clean make Follow the Programming guide to program the Application and SoftDevice separately . Open nRF Connect App and start scanning, a device called nRF52840-MDK-Dongle will be found! You can try to connect it and turn on/off the LED.","title":"Running examples that use a SoftDevice"},{"location":"nrf5-sdk/#more-examples","text":"Over time, more example applications will be added to the repository. You can star or watch the nrf52840-mdk-usb-dongle repository to stay up to date.","title":"More examples"},{"location":"nrf5-sdk/#reference","text":"Nordic nRF5 SDK Nordic Semiconductor Infocenter makerdiary/nrf52840-mdk-usb-dongle","title":"Reference"},{"location":"nrf5-sdk/#license","text":"Content on this page is licensed under the Creative Commons Attribution 3.0 License .","title":"License"},{"location":"nrf5-sdk/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free and click here: Create an Issue","title":"Create an Issue"},{"location":"programming/","text":"How to program the nRF52840 Micro Dev Kit USB Dongle The nRF52840 Micro Dev Kit USB Dongle contains an Open Bootloader with Device Firmware Update (DFU) functionality. You can easily program the Dongle using the following tools: nRF Connet for Desktop nrfutil from the command line. Using nRF Connect for Desktop nRF Connect for Desktop contains a programmer app called nRF Connect Programmer . It is a cross-platform tool that enables programming firmwares to device. Memory layout for Nordic USB devices can be displayed. Content for the HEX files can be displayed, too. Moreover, content of HEX files can be written to the devices. Installation To install the application you can download binaries from the nRF Connect product page on Nordic Semiconductor web pages. nRF Connect currently supports the following operating systems: Windows Ubuntu Linux 64-bit macOS After nRF Connect is installed, you can find Programmer in the app list by selecting Add/remove apps . Programming Application To program the Dongle, it must be in bootloader mode. While holding the dongle's RESET/USR button, connect it to your computer. When the Dongle has entered the bootloader mode, the RGB LED pulses RED. The Dongle is now ready for programming. Launch Programmer app from nRF Connect, you can find the dongle and select it to start programming. Add an application .hex file, you will see the memory layout of the HEX file. Make sure the application address starts from 0x00001000 , and then Write it into the Dongle: Blinky Hex File Warning You MUST provide a correct application firmware without covering the Master Boot Record(MBR) and Bootloader. That is to say the application address should start from 0x00001000 and not exceed 0x000E0000 . After programming, please physically reset the Dongle by re-plugging it. The new firmware should work as expected. Programming SoftDevice If you want to run your application with BLE/ANT, a SoftDevice is required before programming the application. Select a SoftDevice .hex file from nRF5 SDK /components/softdevice/s140/hex , and then write it into the Dongle: Using nrfutil nrfutil is a Python package and command-line utility that supports Device Firmware Updates (DFU) and cryptographic functionality. The nrfutil application and its library offer the following features: DFU package generation Cryptographic key generation, management, and storage Bootloader settings generation DFU procedure over any of the following transports: Bluetooth Low Energy Serial over UART Serial over USB Thread unicast Thread multicast Here is the latest user guide from Nordic Semiconductor: nrfutil User Guide v1.3 Installing from PyPI To install the latest published version from the Python Package Index simply type: pip install nrfutil Updating Application Generate a package (.zip file) that you can later use to update. This command takes several options that you can list using: nrfutil pkg generate --help Below is an example of the generation of a package from an application's app.hex file: nrfutil pkg generate --hw-version 52 --sd-req 0x00 --application-version 1 --application app.hex app_dfu_package.zip There is no SoftDevice required here, just set --sd-req to 0x00 . Tip See the nrfutil User Guide for more commands details. Here we take the blinky example as an example: To update the firmware, the Dongle must be in bootloader mode. While holding the dongle's RESET/USR button, connect it to your host. When the Dongle has entered the bootloader mode, the RGB LED pulses RED. It is now ready for programming. This command takes several options that you can list using: nrfutil dfu usb_serial --help Below is the execution of a DFU procedure of the file generated above over /dev/cu.usbmodem1411 : nrfutil dfu usb_serial -pkg dfu_blinky.zip -p /dev/cu.usbmodem1411 The new application firmware should work as expected after Device programmed. Updating SoftDevice If you want to run your application with BLE/ANT, a SoftDevice is required before programming the application. Here is an example for the generation of a package from a SoftDevice .hex file: nrfutil pkg generate --hw-version 52 --sd-req 0x00 --softdevice s140_nrf52_6.0.0_softdevice.hex --sd-id 0xA9 s140_nrf52_6.0.0_softdevice_dfu_pkg.zip Then update the package using the following command: nrfutil dfu usb_serial -pkg s140_nrf52_6.0.0_softdevice_dfu_pkg.zip -p /dev/cu.usbmodem1411 License Content on this page is licensed under the Creative Commons Attribution 3.0 License . Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Programming"},{"location":"programming/#how-to-program-the-nrf52840-micro-dev-kit-usb-dongle","text":"The nRF52840 Micro Dev Kit USB Dongle contains an Open Bootloader with Device Firmware Update (DFU) functionality. You can easily program the Dongle using the following tools: nRF Connet for Desktop nrfutil from the command line.","title":"How to program the nRF52840 Micro Dev Kit USB Dongle"},{"location":"programming/#using-nrf-connect-for-desktop","text":"nRF Connect for Desktop contains a programmer app called nRF Connect Programmer . It is a cross-platform tool that enables programming firmwares to device. Memory layout for Nordic USB devices can be displayed. Content for the HEX files can be displayed, too. Moreover, content of HEX files can be written to the devices.","title":"Using nRF Connect for Desktop"},{"location":"programming/#installation","text":"To install the application you can download binaries from the nRF Connect product page on Nordic Semiconductor web pages. nRF Connect currently supports the following operating systems: Windows Ubuntu Linux 64-bit macOS After nRF Connect is installed, you can find Programmer in the app list by selecting Add/remove apps .","title":"Installation"},{"location":"programming/#programming-application","text":"To program the Dongle, it must be in bootloader mode. While holding the dongle's RESET/USR button, connect it to your computer. When the Dongle has entered the bootloader mode, the RGB LED pulses RED. The Dongle is now ready for programming. Launch Programmer app from nRF Connect, you can find the dongle and select it to start programming. Add an application .hex file, you will see the memory layout of the HEX file. Make sure the application address starts from 0x00001000 , and then Write it into the Dongle: Blinky Hex File Warning You MUST provide a correct application firmware without covering the Master Boot Record(MBR) and Bootloader. That is to say the application address should start from 0x00001000 and not exceed 0x000E0000 . After programming, please physically reset the Dongle by re-plugging it. The new firmware should work as expected.","title":"Programming Application"},{"location":"programming/#programming-softdevice","text":"If you want to run your application with BLE/ANT, a SoftDevice is required before programming the application. Select a SoftDevice .hex file from nRF5 SDK /components/softdevice/s140/hex , and then write it into the Dongle:","title":"Programming SoftDevice"},{"location":"programming/#using-nrfutil","text":"nrfutil is a Python package and command-line utility that supports Device Firmware Updates (DFU) and cryptographic functionality. The nrfutil application and its library offer the following features: DFU package generation Cryptographic key generation, management, and storage Bootloader settings generation DFU procedure over any of the following transports: Bluetooth Low Energy Serial over UART Serial over USB Thread unicast Thread multicast Here is the latest user guide from Nordic Semiconductor: nrfutil User Guide v1.3","title":"Using nrfutil"},{"location":"programming/#installing-from-pypi","text":"To install the latest published version from the Python Package Index simply type: pip install nrfutil","title":"Installing from PyPI"},{"location":"programming/#updating-application","text":"Generate a package (.zip file) that you can later use to update. This command takes several options that you can list using: nrfutil pkg generate --help Below is an example of the generation of a package from an application's app.hex file: nrfutil pkg generate --hw-version 52 --sd-req 0x00 --application-version 1 --application app.hex app_dfu_package.zip There is no SoftDevice required here, just set --sd-req to 0x00 . Tip See the nrfutil User Guide for more commands details. Here we take the blinky example as an example: To update the firmware, the Dongle must be in bootloader mode. While holding the dongle's RESET/USR button, connect it to your host. When the Dongle has entered the bootloader mode, the RGB LED pulses RED. It is now ready for programming. This command takes several options that you can list using: nrfutil dfu usb_serial --help Below is the execution of a DFU procedure of the file generated above over /dev/cu.usbmodem1411 : nrfutil dfu usb_serial -pkg dfu_blinky.zip -p /dev/cu.usbmodem1411 The new application firmware should work as expected after Device programmed.","title":"Updating Application"},{"location":"programming/#updating-softdevice","text":"If you want to run your application with BLE/ANT, a SoftDevice is required before programming the application. Here is an example for the generation of a package from a SoftDevice .hex file: nrfutil pkg generate --hw-version 52 --sd-req 0x00 --softdevice s140_nrf52_6.0.0_softdevice.hex --sd-id 0xA9 s140_nrf52_6.0.0_softdevice_dfu_pkg.zip Then update the package using the following command: nrfutil dfu usb_serial -pkg s140_nrf52_6.0.0_softdevice_dfu_pkg.zip -p /dev/cu.usbmodem1411","title":"Updating SoftDevice"},{"location":"programming/#license","text":"Content on this page is licensed under the Creative Commons Attribution 3.0 License .","title":"License"},{"location":"programming/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"},{"location":"thread-sniffer/","text":"Build a Thread Network Sniffer with Wireshark This guide details how to set up a Thread Sniffer, which can help you to efficiently analyze Thread network traffic. During development, you may need to check what kind of data is wirelessly transmitted over the Thread network. With the help of the following instructions, you can set up a sniffer which allows to dynamically monitor the IEEE 802.15.4 wireless traffic. The captured frames are passed to Wireshark which allows to decode the Thread protocol and other protocols that it uses like 6LoWPAN, IPv6, UDP, CoAP, providing complete information about the messages that are sent in the mesh network. What you'll need nRF52840 Micro Dev Kit USB Dongle PC running a Linux based operating system or MacOS Wireshark 2.4.1 or newer Python 2.7.10 Installing Wireshark About Wireshark Wireshark is the world\u2019s foremost and widely-used network protocol analyzer. It lets you see what\u2019s happening on your network at a microscopic level and is the de facto (and often de jure) standard across many commercial and non-profit enterprises, government agencies, and educational institutions. On MacOS, go to the Wireshark Download page and download the current stable release of Wireshark. On Ubuntu Linux, you can run the following commands: $ sudo add-apt-repository ppa:dreibh/ppa $ sudo apt-get update $ sudo apt-get install wireshark Connecting the USB Dongle Connect the nRF52840 Micro Dev Kit USB Dongle to your host as shown below: The USB Dongle will be recognized as an nRF52840 OpenThread Device like this: Starting Wireshark with the Sniffer At first, you must clone the pyspinel repository which will be used as an interface between NCP and Wireshark. $ git clone https://github.com/openthread/pyspinel.git $ cd pyspinel $ sudo pip install --user pyserial $ sudo pip install --user ipaddress Then start Wireshark with the following command: $ sudo python ./sniffer.py -c 11 -n 1 -b 115200 --crc -u /dev/cu.usbmodem1411 --no-reset | wireshark -k -i - The parameters stand for the following: -c : Thread Channel -n : Node ID \u2013crc : Disables the wrong FCS warning resulting from the fact that Nordic radio replaces one byte of CRC with LQI after a packet is received and verified. \u2013no-reset : Used when NCP is connected via the native USB connection, otherwise this parameter should be omitted. Enter the menu Wireshark - Preferences , and then go to Protocols - IEEE 802.15.4 . Edit the Decryption Keys with the following values: Decryption key: 00112233445566778899aabbccddeeff Decryption key index: 1 Key hash: Thread hash Go to Protocols - Thread and edit the settings. Go to Protocols - 6LoWPAN and edit the settings. Now you are ready to get the Thread packets and analyze network traffic. Tip You can follow this guide to Build a Thread network with nRF52840-MDK for testing. Reference Thread Sniffer based on nRF52840 with Wireshark pyspinel repository Wireshark Developer\u2019s Guide License Content on this page is licensed under the Creative Commons Attribution 3.0 License . Create an Issue Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Thread Network Sniffer"},{"location":"thread-sniffer/#build-a-thread-network-sniffer-with-wireshark","text":"This guide details how to set up a Thread Sniffer, which can help you to efficiently analyze Thread network traffic. During development, you may need to check what kind of data is wirelessly transmitted over the Thread network. With the help of the following instructions, you can set up a sniffer which allows to dynamically monitor the IEEE 802.15.4 wireless traffic. The captured frames are passed to Wireshark which allows to decode the Thread protocol and other protocols that it uses like 6LoWPAN, IPv6, UDP, CoAP, providing complete information about the messages that are sent in the mesh network.","title":"Build a Thread Network Sniffer with Wireshark"},{"location":"thread-sniffer/#what-youll-need","text":"nRF52840 Micro Dev Kit USB Dongle PC running a Linux based operating system or MacOS Wireshark 2.4.1 or newer Python 2.7.10","title":"What you'll need"},{"location":"thread-sniffer/#installing-wireshark","text":"About Wireshark Wireshark is the world\u2019s foremost and widely-used network protocol analyzer. It lets you see what\u2019s happening on your network at a microscopic level and is the de facto (and often de jure) standard across many commercial and non-profit enterprises, government agencies, and educational institutions. On MacOS, go to the Wireshark Download page and download the current stable release of Wireshark. On Ubuntu Linux, you can run the following commands: $ sudo add-apt-repository ppa:dreibh/ppa $ sudo apt-get update $ sudo apt-get install wireshark","title":"Installing Wireshark"},{"location":"thread-sniffer/#connecting-the-usb-dongle","text":"Connect the nRF52840 Micro Dev Kit USB Dongle to your host as shown below: The USB Dongle will be recognized as an nRF52840 OpenThread Device like this:","title":"Connecting the USB Dongle"},{"location":"thread-sniffer/#starting-wireshark-with-the-sniffer","text":"At first, you must clone the pyspinel repository which will be used as an interface between NCP and Wireshark. $ git clone https://github.com/openthread/pyspinel.git $ cd pyspinel $ sudo pip install --user pyserial $ sudo pip install --user ipaddress Then start Wireshark with the following command: $ sudo python ./sniffer.py -c 11 -n 1 -b 115200 --crc -u /dev/cu.usbmodem1411 --no-reset | wireshark -k -i - The parameters stand for the following: -c : Thread Channel -n : Node ID \u2013crc : Disables the wrong FCS warning resulting from the fact that Nordic radio replaces one byte of CRC with LQI after a packet is received and verified. \u2013no-reset : Used when NCP is connected via the native USB connection, otherwise this parameter should be omitted. Enter the menu Wireshark - Preferences , and then go to Protocols - IEEE 802.15.4 . Edit the Decryption Keys with the following values: Decryption key: 00112233445566778899aabbccddeeff Decryption key index: 1 Key hash: Thread hash Go to Protocols - Thread and edit the settings. Go to Protocols - 6LoWPAN and edit the settings. Now you are ready to get the Thread packets and analyze network traffic. Tip You can follow this guide to Build a Thread network with nRF52840-MDK for testing.","title":"Starting Wireshark with the Sniffer"},{"location":"thread-sniffer/#reference","text":"Thread Sniffer based on nRF52840 with Wireshark pyspinel repository Wireshark Developer\u2019s Guide","title":"Reference"},{"location":"thread-sniffer/#license","text":"Content on this page is licensed under the Creative Commons Attribution 3.0 License .","title":"License"},{"location":"thread-sniffer/#create-an-issue","text":"Interested in contributing to this project? Want to report a bug? Feel free to click here: Create an Issue","title":"Create an Issue"}]}